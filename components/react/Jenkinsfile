#!/usr/bin/env groovy
def label = "kyma-${UUID.randomUUID().toString()}"
def application = '@kyma-project/react-components'
def isMaster = params.GIT_BRANCH == 'master'

echo """
********************************
Job started with the following parameters:
DOCKER_REGISTRY=${env.DOCKER_REGISTRY}
DOCKER_CREDENTIALS=${env.DOCKER_CREDENTIALS}
CHECKMARX_LIBRARY=${env.CHECKMARX_LIBRARY}
GIT_REVISION=${params.GIT_REVISION}
GIT_BRANCH=${params.GIT_BRANCH}
APP_VERSION=${params.APP_VERSION}
APP_FOLDER=${env.APP_FOLDER}
REACT_COMPONENTS_VERSION=${params.REACT_COMPONENTS_VERSION}
********************************
"""

podTemplate(label: label) {
    node(label) {
        try {
            timestamps {
                timeout(time:200, unit:"MINUTES") {
                    ansiColor('xterm') {
                        stage("setup") {
                            checkout scm

                            withCredentials([usernamePassword(credentialsId: env.DOCKER_CREDENTIALS, passwordVariable: 'pwd', usernameVariable: 'uname')]) {
                                sh "docker login -u $uname -p '$pwd' $env.DOCKER_REGISTRY"
                            }

                            if (isMaster) {
                                ws() {
                                    scriptUrl = "$env.CHECKMARX_LIBRARY"
                                    scan = loadModule url: scriptUrl, name: 'scan', branch: 'kyma'
                                }
                            }
                        }

                        stage("resolve dependencies $application") {
                            execute("npm install -f")
                        }

                        stage("code quality $application") {
                            execute("make validate")
                        }

                        stage("test $application") {
                            execute("make test")
                        }

                        if (isMaster) {
                            stage("IP scan $application (WhiteSource)") {
                                withCredentials([string(credentialsId: 'whitesource_apikey', variable: 'apikey')]) {
                                    execute("make scan", ["API_KEY=$apikey"])
                                }
                            }
                        }

                        // if (isMaster) {
                        //     stage("security scan $application (Checkmarx)"){
                        //         scan.checkmarx(projectname: "KYMA_" + application.toUpperCase() + "_" + "MASTER", credentialsId: 'checkmarx' )
                        //     }
                        // }

                        stage("build $application") {
                            execute('make build')
                        }

                        if (!isMaster || params.REACT_COMPONENTS_VERSION) {
                            stage("publish new version of $application") {
                                withCredentials([string(credentialsId: 'npmrc-kyma-bot', variable: 'npmrctoken')]) {
                                    execute("../../scripts/publish-react-components.sh -t $npmrctoken -v ${params.REACT_COMPONENTS_VERSION}")
                                }
                            }

                            stage("push updated packages to master") {
                                withCredentials([sshUserPrivateKey(credentialsId: "bitbucket-rw", keyFileVariable: 'sshfile')]) {
                                    sh "./scripts/push-react-components.sh -s $sshfile --overwrite-git-config"
                                }
                            }

                            stage("prepare gh-page of $application") {
                                execute('npm run styleguide:build')
                            }

                            stage("publish gh-page of $application") {
                                withCredentials([sshUserPrivateKey(credentialsId: "bitbucket-rw", keyFileVariable: 'sshfile')]) {
                                    sh "./scripts/publish-gh-page.sh -s $sshfile --overwrite-git-config"
                                }
                            }
                        }
                    }
                }
            }
        } catch (ex) {
            echo "Got exception: ${ex}"
            currentBuild.result = "FAILURE"
            def body = "${currentBuild.currentResult} ${env.JOB_NAME}${env.BUILD_DISPLAY_NAME}: on branch: ${params.GIT_BRANCH}. See details: ${env.BUILD_URL}"
            emailext body: body, recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'CulpritsRecipientProvider'], [$class: 'RequesterRecipientProvider']], subject: "${currentBuild.currentResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]'"
        }
    }
}

def execute(command, envs = []) {
    def repositoryName = 'console'
    def buildpack = 'node-buildpack:0.0.9'
    def envText = ''
    for (it in envs) {
        envText = "$envText --env $it"
    }
    workDir = pwd()
    sh "docker run --rm -v $workDir:/$repositoryName -w /$repositoryName/$env.APP_FOLDER $envText ${env.DOCKER_REGISTRY}$buildpack /bin/bash -c '$command'"
}
